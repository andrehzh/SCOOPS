{"ast":null,"code":"rnf;","map":{"version":3,"names":["rnf"],"sources":["/Users/michelsim/Scoops/components/screens/buyerHomepage/BuyerMain.js"],"sourcesContent":["/* import React, { Component } from 'react'\nimport { View, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchUser } from '../redux/actions/index'\n\nimport FeedScreen from './Feed'\n// import SearchScreen from './homepage/Search'\nimport CheckoutScreen from './Checkout'\n\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons'\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs'\n\nconst Tab = createMaterialBottomTabNavigator();\n\nconst EmptyScreen = () => {\n    return(null)\n}\n\nexport class Main extends Component {\n    componentDidMount() {\n        this.props.fetchUser();\n    }\n  render() {\n    return (\n        <Tab.Navigator initalRouteName = \"Feed\" labeled = {false}>\n            <Tab.Screen name = \"Feed\" component = {FeedScreen}\n                options = {{\n                    tabBarIcon: ({ color, size }) => (\n                        <MaterialCommunityIcons name = \"home\" color = { color } size = { 26 }/>\n            )\n          }}/> \n            <Tab.Screen name = \"Explore\" component = {EmptyScreen}\n                listeners = {({ navigation }) => ({\n                    tabPress: event => {\n                        event.preventDefault();\n                        navigation.navigate(\"Search\")\n                    }\n                })}\n                options = {{\n                    tabBarIcon: ({ color, size }) => (\n                        <MaterialCommunityIcons name = \"magnify\" color = { color } size = { 26 }/>\n            )\n          }}/>\n            <Tab.Screen name = \"Checkout\" component = {CheckoutScreen}\n                options = {{\n                    tabBarIcon: ({ color, size }) => (\n                        <MaterialCommunityIcons name = \"cart-variant\" color = { color } size = { 26 }/>\n            )\n          }}/>\n      </Tab.Navigator>\n    )\n  }\n}\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser\n})\nconst mapDispatchProps = (dispatch) => bindActionCreators({fetchUser}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchProps)(Main) */\n\nrnf"],"mappings":"AA6DAA,GAAG"},"metadata":{},"sourceType":"script"}